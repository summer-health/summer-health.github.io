"use strict";(self.webpackChunkexternal_blog=self.webpackChunkexternal_blog||[]).push([[2126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={slug:"storybook-interactive-testing-with-mui",title:"Storybook Interactive Testing with MUI",description:"What we've learned about setting up interactive tests with Storybook and MUI.",authors:["eilinora"],tags:["storybook","mui","react","interactive","testing","interactivetesting"],image:"/img/storybook-interactive-test-behavior.png"},r="Improving FE Testing",s={permalink:"/blog/storybook-interactive-testing-with-mui",source:"@site/blog/2024-03-28-storybook-interactive-testing-with-mui/index.md",title:"Storybook Interactive Testing with MUI",description:"What we've learned about setting up interactive tests with Storybook and MUI.",date:"2024-03-28T00:00:00.000Z",formattedDate:"March 28, 2024",tags:[{label:"storybook",permalink:"/blog/tags/storybook"},{label:"mui",permalink:"/blog/tags/mui"},{label:"react",permalink:"/blog/tags/react"},{label:"interactive",permalink:"/blog/tags/interactive"},{label:"testing",permalink:"/blog/tags/testing"},{label:"interactivetesting",permalink:"/blog/tags/interactivetesting"}],readingTime:8.795,hasTruncateMarker:!0,authors:[{name:"Lori Hutchek",imageURL:"https://github.com/eilinora.png",key:"eilinora"}],frontMatter:{slug:"storybook-interactive-testing-with-mui",title:"Storybook Interactive Testing with MUI",description:"What we've learned about setting up interactive tests with Storybook and MUI.",authors:["eilinora"],tags:["storybook","mui","react","interactive","testing","interactivetesting"],image:"/img/storybook-interactive-test-behavior.png"},nextItem:{title:"Storybook and HOCs a Beautiful Friendship \ud83e\udd1d",permalink:"/blog/storybook-and-hocs-a-beautiful-friendship"}},l={authorsImageUrls:[void 0]},p=[{value:"Setting up your form story",id:"setting-up-your-form-story",level:2},{value:"Interactive testing with forms",id:"interactive-testing-with-forms",level:2},{value:"One last gotcha!",id:"one-last-gotcha",level:2},{value:"Time to wrap up!",id:"time-to-wrap-up",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...i}=e;return(0,o.kt)(m,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Our team does a lot of our UI development in Storybook. If you are curious about how we manage our business logic, you can read more about how we build our UI components ",(0,o.kt)("a",{parentName:"p",href:"https://summer-health.github.io/blog/storybook-and-hocs-a-beautiful-friendship"},"here"),"."),(0,o.kt)("p",null,"Storybook has been working hard to improve its UI testing features and introduced integrated interactive testing in version 7, where you can build UI tests that can run in your preferred test runner. We decided to try this with our components, and this blog will go into what we have found so far with our experimentation."),(0,o.kt)("h2",{id:"setting-up-your-form-story"},"Setting up your form story"),(0,o.kt)("p",null,"As mentioned, we use MUI as our design and component base for our components. We also use ",(0,o.kt)("inlineCode",{parentName:"p"},"react-hook-form")," to build our form management and ",(0,o.kt)("inlineCode",{parentName:"p"},"contentful")," to manage our page content. These packages and utilities make building components easier, but I noticed some quarks when attempting to build our interactive tests using Storybooks' new feature. To help others, I will walk through an example of our forms and then share some examples of our interactive tests to help others."),(0,o.kt)("p",null,"To help frame the test, below is an example of one of our forms shortened a little in the interest of brevity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// imports.. removed for brevity\n\nexport interface FormContent {\n  overline: string;\n  header: string;\n  fieldsCollection: ContentfulFormInputCollection;\n  button: ContentfulButton;\n}\n\nexport interface FormFields {\n  firstName: string;\n  lastName: string;\n  dateOfBirth: Dayjs | null;\n  gender: string;\n  attestation: boolean;\n}\n\nexport interface FormProps {\n  content: FormContent;\n  disabledSubmit?: boolean;\n  methods: UseFormReturn<FormFields>;\n  onSubmit: () => Promise<void>;\n}\n\nexport const Form = ({\n  content,\n  disabledSubmit,\n  methods,\n  onSubmit,\n}: AddChildFormProps): JSX.Element => {\n  const {\n    control,\n    formState: { isSubmitting },\n  } = methods;\n  const { fieldsCollection } = content;\n  const gender = getFormFieldProperties({ fieldsCollection, name: \'gender\' });\n\n  return (\n    <Card variant="standard">\n      <CardHeader\n        title={\n          <>\n            <Typography variant="body2" color="sunrise.text-secondary">\n              {content.overline}\n            </Typography>\n            <Typography variant="h3">{content.header}</Typography>\n          </>\n        }\n      />\n      <CardContent>\n        <Stack spacing={2}>\n          <FormTextArea\n            control={control}\n            name="firstName"\n            label={\n              getFormFieldProperties({ fieldsCollection, name: \'firstName\' })\n                ?.label ?? \'First name\'\n            }\n            placeholder={\n              getFormFieldProperties({ fieldsCollection, name: \'firstName\' })\n                ?.placeholder\n            }\n            isRequired\n          />\n          <FormTextArea\n            control={control}\n            name="lastName"\n            label={\n              getFormFieldProperties({ fieldsCollection, name: \'lastName\' })\n                ?.label ?? \'Last name\'\n            }\n            placeholder={\n              getFormFieldProperties({ fieldsCollection, name: \'lastName\' })\n                ?.placeholder\n            }\n            isRequired\n          />\n          <FormDatePicker\n            control={control}\n            color="secondary"\n            name="dateOfBirth"\n            label={\n              getFormFieldProperties({ fieldsCollection, name: \'dateOfBirth\' })\n                ?.label ?? \'Date of Birth\'\n            }\n            disableFuture\n            disableHighlightToday\n            showDaysOutsideCurrentMonth\n            isRequired\n          />\n          <FormSelect\n            control={control}\n            name="gender"\n            label={\n              gender?.label ?? \'Birth Sex\'\n            }\n            placeholder={\n              gender?.placeholder\n            }\n            optionsCollection={\n              gender?.optionsCollection\n            }\n            isRequired\n          />\n          <Divider\n            variant="standard"\n            sx={(theme): object => ({\n              marginTop: `${theme.spacing(2.5)} !important`,\n              marginBottom: `${theme.spacing(2.5)} !important`,\n            })}\n          />\n          <FormCheckbox\n            control={control}\n            color="sunrise.text-primary"\n            name="attestation"\n            body={\n              getFormFieldProperties({ fieldsCollection, name: \'attestation\' })\n                ?.body\n            }\n            isRequired\n            sx={{\n              marginTop: \'0 !important\',\n            }}\n          />\n\n          <Divider variant="standard" />\n        </Stack>\n      </CardContent>\n      <CardActions>\n        {isSubmitting ? (\n          <LoadingButton color="secondary" fullWidth />\n        ) : (\n          <Button\n            disabled={disabledSubmit}\n            onClick={onSubmit}\n            testid={`form:submit`}\n            type="submit"\n            color="secondary"\n            fullWidth\n          >\n            {content?.button?.displayText}\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n')),(0,o.kt)("p",null,"And a screenshot of what our component looks like in Storybook."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Form",src:n(7033).Z,width:"2154",height:"1648"})),(0,o.kt)("p",null,"Because the form setup happens outside the UI components, we can set up our stories, which build our content and form values for various form states if needed. Below is our simple empty-form story."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { userEvent, within } from '@storybook/test';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport {\n  FormContent,\n  FormFields,\n  Form as UIForm,\n} from '@summer-health/ui/care-form-date';\nimport dayjs from 'dayjs';\n\nconst meta: Meta = {\n  component: UIForm,\n  title: 'Components/Form',\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst content: FormContent = {\n  overline: \"Let's your information\",\n  header: 'Add your information',\n  button: {\n    displayText: 'Submit',\n  },\n  fieldsCollection: {\n    items: [\n      {\n        name: 'firstName',\n        label: 'First Name',\n      },\n      // ... removed for brevity\n    ],\n  },\n};\n\nconst render = (): JSX.Element => {\n  const defaultValues: AddChildFormFields = {\n    firstName: '',\n    lastName: '',\n    gender: '',\n    dateOfBirth: dayjs(),\n    attestation: false,\n  };\n  const methods = useForm<AddChildFormFields>({\n    defaultValues,\n    mode: 'onBlur',\n  });\n  const { handleSubmit, formState } = methods;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const onSubmit = handleSubmit((data: any) => {\n    // eslint-disable-next-line no-console\n    console.log('submit me!', data);\n  });\n\n  return (\n    <FormProvider {...methods}>\n      <UIAddChildForm\n        content={content}\n        disabledSubmit={!formState.isValid}\n        methods={methods}\n        onSubmit={onSubmit}\n        pageSection=\"story\"\n      />\n    </FormProvider>\n  );\n};\n\n\nexport const DefaultForm: Story = {\n  render,\n};\n")),(0,o.kt)("p",null,"Now that we have that setup, let's talk about interactive tests. \ud83d\ude0a"),(0,o.kt)("h2",{id:"interactive-testing-with-forms"},"Interactive testing with forms"),(0,o.kt)("p",null,"Storybook documentation has some simple examples of building an interaction which you can find ",(0,o.kt)("a",{parentName:"p",href:"https://storybook.js.org/docs/writing-tests/interaction-testing#write-an-interaction-test"},"here"),". Let's start with the overall interactive test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export const FilledForm: Story = {\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement.parentElement);\n\n    step('Fill out the form', async () => {\n      await userEvent.clear(await canvas.getByTestId('dateOfBirth'));\n\n      await userEvent.type(await canvas.getByTestId('firstName'), 'Jane');\n      await userEvent.type(await canvas.getByTestId('lastName'), 'Doe');\n\n      await userEvent.type(\n        await canvas.getByTestId('dateOfBirth'),\n        '02/02/2024',\n      );\n\n      await userEvent.click(await canvas.getByLabelText('Birth Sex'));\n\n      const presentation = within(canvas.getByRole('presentation'));\n      await userEvent.click(await presentation.getByTestId('Female'));\n\n      await userEvent.click(await canvas.getByTestId('attestation'));\n\n      await userEvent.click(await canvas.getByTestId('form:submit'));\n    });\n  },\n  render,\n};\n")),(0,o.kt)("p",null,"Now, let's walk through this test line by line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const canvas = within(canvasElement.parentElement);\n")),(0,o.kt)("p",null,"If you've looked at the documentation in ",(0,o.kt)("a",{parentName:"p",href:"https://storybook.js.org/docs/writing-tests/interaction-testing"},"Storybook docs")," you will see that they set up their variable canvas by doing ",(0,o.kt)("inlineCode",{parentName:"p"},"const canvas = within(canvasElement);"),". This will give you the ",(0,o.kt)("inlineCode",{parentName:"p"},'<div id="storybook-root">')," element in the iframe. Although this is fine for most tests, if you're using MUI and have modals, popups, or dropdowns, you'll need to be able to access the whole ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," of your storybook ",(0,o.kt)("inlineCode",{parentName:"p"},"iframe"),". Since the ",(0,o.kt)("inlineCode",{parentName:"p"},"canvasElement")," is a DOM element, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"parentElement")," to navigate up the DOM to the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," element. We can query the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," DOM element from here to get any element in the document ",(0,o.kt)("inlineCode",{parentName:"p"},"body"),". We'll talk more later about why we need to access the whole ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," when we talk about activating our ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," component. For now, let's move to the following line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await userEvent.clear(await canvas.getByTestId('dateOfBirth'));\n")),(0,o.kt)("p",null,"Along with using the MUI ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-select/"},"Select")," component, our form uses MUI's ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/x/react-date-pickers/date-picker/"},"DatePicker")," component. When setting up your default form values, if you need to set up your form with a date, you'll need to be able to clear the date before you have the interactive test type in a new date option. You may have noticed that this is higher up in our test setup. This is because of an odd quirk: the value wont be set if you clear it right before typing. As of writing this, I'm unsure if this is an MUI issue or a Storybook issue. Clearing the value early works!"),(0,o.kt)("p",null,"Our basic setup is complete from here, and we can start interacting with the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await userEvent.type(await canvas.getByTestId('firstName'), 'Jane');\nawait userEvent.type(await canvas.getByTestId('lastName'), 'Doe');\n")),(0,o.kt)("p",null,"The above lines of code find the 2 ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-text-field/"},"TextField")," components in our form by adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"data-testid")," attribute on our ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," component. In order to make the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," field findable in our form, we'll need to add this attribute to our react element. Here is a snippet of our reusable ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," component we drop into all our forms. The ",(0,o.kt)("inlineCode",{parentName:"p"},"inputProps")," attribute on the ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField")," component allows us to customize to the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"<TextField\n  id={name}\n  inputProps={{\n    'data-testid': name,\n  }}\n  value={value}\n  label={label}\n/>\n")),(0,o.kt)("p",null,"We must now do the same thing to our ",(0,o.kt)("inlineCode",{parentName:"p"},"DatePicker"),", which we'll interact with next. You'll want to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-testid")," attribute to the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," field that is associated with the ",(0,o.kt)("inlineCode",{parentName:"p"},"DatePicker")," so you can type into it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"<DatePicker\n  slotProps={{\n    textField: {\n      color,\n      inputProps: {\n        'data-testid': name,\n      },\n    },\n  }}\n  value={value}\n  onChange={onChange}\n/>\n")),(0,o.kt)("p",null,"Let's now interact with ",(0,o.kt)("inlineCode",{parentName:"p"},"DatePicker"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await userEvent.type(await canvas.getByTestId('birthDate'), '02/02/2024');\n")),(0,o.kt)("p",null,"Now that we have the date entered, we can move on to selecting gender in our form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await userEvent.click(await canvas.getByLabelText('Birth Sex'));\n\nconst presentation = within(canvas.getByRole('presentation'));\nawait userEvent.click(await presentation.getByTestId('Female'));\n")),(0,o.kt)("p",null,"First, we must activate the dropdown that appears with our ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-select/"},"Select")," component. Unfortunately, as of this writing, the only way I've found to activate the ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," component is by clicking on the label text. Unfortunately, adding ",(0,o.kt)("inlineCode",{parentName:"p"},"data-testid")," to either the ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," field or the ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," component didn't trigger the dropdown options to appear."),(0,o.kt)("p",null,"As you'll remember, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"canvasElement.parentElement")," to access our DOM's ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," element. Once our dropdown options have been rendered, a new DOM element should be added called ",(0,o.kt)("inlineCode",{parentName:"p"},"presentation"),". From here, we can query the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," DOM to get the ",(0,o.kt)("inlineCode",{parentName:"p"},"presentation")," div element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const presentation = within(canvas.getByRole('presentation'));\n")),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"presentation")," div is where MUI renders its modals, popups, and various other components that require that they have the highest z-index order in the DOM. After finding the ",(0,o.kt)("inlineCode",{parentName:"p"},"presentation")," DOM element, we can select one of our options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await userEvent.click(await presentation.getByTestId('Female'));\n")),(0,o.kt)("p",null,"Fortunately, adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"data-testid")," to our ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-checkbox/"},"Checkbox")," component is straightforward. Just add ",(0,o.kt)("inlineCode",{parentName:"p"},"data-testid={name}")," to your component and it will make your component queryable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await userEvent.click(await canvas.getByTestId('attestation'));\n")),(0,o.kt)("p",null,"Calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"click")," action will now select the checkbox. Since all fields are required for our form to work as expected. Once all fields are filled in our submit button should now be activated. If your form submit button isn't active the test will fail because your button will not be in an active state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await userEvent.click(await canvas.getByTestId('form:submit'));\n")),(0,o.kt)("p",null,"In this particular test, we don't need an ",(0,o.kt)("inlineCode",{parentName:"p"},"expect")," test as we are working to validate that the form activates when all fields are input and that all fields are interactable."),(0,o.kt)("h2",{id:"one-last-gotcha"},"One last gotcha!"),(0,o.kt)("p",null,"You may have noticed in documentation that you can break up interactions into multiple steps. Unfortunately, I've found that doing this doesn't fully fill in the form as expected. It will only partially fill out the form, and the test will fail. I'm unsure if this is an issue with the MUI framework or Storybook interactive testing library. For now, when it comes to forms, I would keep it all in one ",(0,o.kt)("inlineCode",{parentName:"p"},"step"),"."),(0,o.kt)("h2",{id:"time-to-wrap-up"},"Time to wrap up!"),(0,o.kt)("p",null,"In our quest to enhance frontend testing, we dove headfirst into Storybook's latest feature: integrated interactive testing. Armed with excitement, we embarked on a journey of exploration, focusing keenly on optimizing form interactions. Storybook's version 7 has truly stepped up its game, seamlessly integrating with various testing runners, providing developers like us with a smoother testing experience."),(0,o.kt)("p",null,"As we tinkered with form setups within Storybook, we stumbled upon a few quirks, especially given our reliance on Material-UI (MUI), ",(0,o.kt)("inlineCode",{parentName:"p"},"react-hook-form"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"contentful"),". However, armed with determination, we charted a step-by-step path to crafting interactive tests for forms, serving as a beacon of guidance for fellow developers navigating similar waters. Along the way, we tackled nuances like clearing date fields, accessing dropdown options, and ensuring all form fields play nicely to activate the submit button. Although we faced a hiccup when breaking interactions into multiple steps, we pressed on, sharing our insights to foster a community of developers armed with stronger testing methodologies and a sprinkle of camaraderie."))}d.isMDXComponent=!0},7033:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/form-2a1b0d498e6c27896f406873e959de9e.png"}}]);