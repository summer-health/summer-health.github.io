"use strict";(self.webpackChunkexternal_blog=self.webpackChunkexternal_blog||[]).push([[603],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,g=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return t?i.createElement(g,r(r({ref:n},d),{},{components:t})):i.createElement(g,r({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const o={slug:"workflow",title:"Achieving 15-Minute Pediatrician Access",description:"Our system design journey with workflow engine",authors:["mimu0"],tags:["workflow","system design"],image:"/img/blog-workflow.jpg"},r=void 0,l={permalink:"/blog/workflow",source:"@site/blog/2023-08-31-workflow/index.md",title:"Achieving 15-Minute Pediatrician Access",description:"Our system design journey with workflow engine",date:"2023-08-31T00:00:00.000Z",formattedDate:"August 31, 2023",tags:[{label:"workflow",permalink:"/blog/tags/workflow"},{label:"system design",permalink:"/blog/tags/system-design"}],readingTime:5.395,hasTruncateMarker:!0,authors:[{name:"Mimu Jung",imageURL:"https://github.com/mimu0.png",key:"mimu0"}],frontMatter:{slug:"workflow",title:"Achieving 15-Minute Pediatrician Access",description:"Our system design journey with workflow engine",authors:["mimu0"],tags:["workflow","system design"],image:"/img/blog-workflow.jpg"},nextItem:{title:"Why We Use MUI",permalink:"/blog/2023/08/23/why-we-use-mui"}},s={authorsImageUrls:[void 0]},c=[{value:"The Challenge",id:"the-challenge",level:2},{value:"The Solution: An Idle Monitoring System",id:"the-solution-an-idle-monitoring-system",level:2},{value:"The Initial Approach",id:"the-initial-approach",level:2},{value:"Challenges Faced",id:"challenges-faced",level:3},{value:"The New Design",id:"the-new-design",level:2},{value:"The Power of Workflow Engines",id:"the-power-of-workflow-engines",level:3},{value:"1. Simplified State Management",id:"1-simplified-state-management",level:4},{value:"2. Effortless Timer Management",id:"2-effortless-timer-management",level:4},{value:"3. Robust Retry Mechanisms",id:"3-robust-retry-mechanisms",level:4},{value:"4. Streamlined Code Maintenance",id:"4-streamlined-code-maintenance",level:4},{value:"Visualizing Workflow Engine in Action",id:"visualizing-workflow-engine-in-action",level:3},{value:"Signals and Activities: Powering Workflow Execution",id:"signals-and-activities-powering-workflow-execution",level:4},{value:"Crafting a Simplified Workflow Interface",id:"crafting-a-simplified-workflow-interface",level:4},{value:"Streamlining Workflow Logic",id:"streamlining-workflow-logic",level:4},{value:"Real-World Applications",id:"real-world-applications",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c},m="wrapper";function p(e){let{components:n,...o}=e;return(0,a.kt)(m,(0,i.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Imagine the peace of mind of being able to connect with a pediatrician within\njust 15 minutes, around the clock, as a parent.\nThat's exactly what we provide to our caregivers.\nIn this blog post, I will describe how we designed the system to achieve this goal."),(0,a.kt)("h2",{id:"the-challenge"},"The Challenge"),(0,a.kt)("p",null,"Our top priority is to promptly answer any questions or concerns\nraised by caregivers. However, we understand that our providers may not always\nbe available to respond immediately.\nThis presented us with a challenge:\nhow do we ensure quick response times while accommodating our providers' availability?"),(0,a.kt)("h2",{id:"the-solution-an-idle-monitoring-system"},"The Solution: An Idle Monitoring System"),(0,a.kt)("p",null,"To address this challenge, we developed an idle monitoring system that\nenhances communication between caregivers and providers.\nThis system operates according to a set of rules that automatically trigger\nnotifications based on the duration of inactivity."),(0,a.kt)("p",null,"Let's take a closer look at these rules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"15-Minute Reminder:")," After the last message from a caregiver,\nan SMS should nudge the provider."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"30-Minute Alert:")," If there's been no response for 30 minutes,\nan internal Slack notification should be sent to the operations team,\ninitiating manual backup provider allocation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"60-Minute On-call Handover:")," After a full hour of silence,\nthe on-call provider should receive an SMS and take over the conversation.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Idle monitor",src:t(9862).Z,width:"2012",height:"1172"})),(0,a.kt)("h2",{id:"the-initial-approach"},"The Initial Approach"),(0,a.kt)("p",null,"Our first design utilized ",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/tasks"},"Cloud Tasks")," to\nschedule tasks. Here's how it worked:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When the idle window began, we scheduled a task to trigger an event in 15 minutes."),(0,a.kt)("li",{parentName:"ul"},"Once the task timer fired, we checked the conversation's status and\nnotified the provider accordingly."),(0,a.kt)("li",{parentName:"ul"},"We performed a series of checks, such as fetching conversation messages and\nverifying if the conversation was indeed in the idle window."),(0,a.kt)("li",{parentName:"ul"},"If confirmed, we sent a notification to the provider; otherwise, we skipped it."),(0,a.kt)("li",{parentName:"ul"},"Complex calculations were required to determine when the idle window commenced.")),(0,a.kt)("h3",{id:"challenges-faced"},"Challenges Faced"),(0,a.kt)("p",null,"However, this initial approach brought about some challenges:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Task Overload:")," Multiple tasks were scheduled for various conversations,\nbut most remained unused and ignored."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Resource-Intensive:")," Upon task trigger, we had to fetch all conversation\nmessages to determine if the conversation was idle.\nThis proved resource-intensive and inefficient.")),(0,a.kt)("h2",{id:"the-new-design"},"The New Design"),(0,a.kt)("p",null,"In our quest to improve our idle monitoring system, we needed an easy way to\nmanage state, timers, and retries. Enter workflow engines, the game-changer that\nmet all our requirements."),(0,a.kt)("h3",{id:"the-power-of-workflow-engines"},"The Power of Workflow Engines"),(0,a.kt)("h4",{id:"1-simplified-state-management"},"1. Simplified State Management"),(0,a.kt)("p",null,"Workflow engines provide isolated environments, simplifying state management.\nEach workflow operates independently, making state management a breeze."),(0,a.kt)("h4",{id:"2-effortless-timer-management"},"2. Effortless Timer Management"),(0,a.kt)("p",null,"With workflow engines, timers become worry-free. Isolation ensures\ntimers won't disrupt the application, enhancing precision and reliability."),(0,a.kt)("h4",{id:"3-robust-retry-mechanisms"},"3. Robust Retry Mechanisms"),(0,a.kt)("p",null,"Workflow engines offer robust retry capabilities, ensuring system resilience.\nWe can handle failures gracefully, maintaining system integrity."),(0,a.kt)("h4",{id:"4-streamlined-code-maintenance"},"4. Streamlined Code Maintenance"),(0,a.kt)("p",null,"We separate state and timer code into distinct workflows,\nsimplifying code maintenance, organization, and future improvements."),(0,a.kt)("h3",{id:"visualizing-workflow-engine-in-action"},"Visualizing Workflow Engine in Action"),(0,a.kt)("p",null,"When it came to choosing a workflow engine for our system,\nwe opted for ",(0,a.kt)("a",{parentName:"p",href:"https://temporal.io"},"Temporal")," due to its dynamic features and user-friendly\napproach in conceptualizing workflow engines.\nLet's dive into the fundamental aspects of\nTemporal that played a pivotal role in our implementation."),(0,a.kt)("h4",{id:"signals-and-activities-powering-workflow-execution"},"Signals and Activities: Powering Workflow Execution"),(0,a.kt)("p",null,"In Temporal, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Signal")," represents an event triggered by the application,\nacting as an input for the workflow. Conversely, an ",(0,a.kt)("inlineCode",{parentName:"p"},"Activity")," represents\nan action that the workflow can execute on the application.\nThese two elements serve as the backbone of our system,\nenabling seamless interaction and coordination between the workflow and the application."),(0,a.kt)("h4",{id:"crafting-a-simplified-workflow-interface"},"Crafting a Simplified Workflow Interface"),(0,a.kt)("p",null,"To encapsulate the logic of our idle monitoring system efficiently,\nwe crafted a streamlined and uncluttered workflow interface.\nBy keeping things simple, we established a solid foundation for managing the\nflow and interactions within our system."),(0,a.kt)("p",null,"Here's an example of how our workflow interface looks:"),(0,a.kt)("mermaid",{value:'flowchart LR\n    subgraph Workflow Environment\n    Workflow["Workflow"]\n    end\n\n    subgraph Signal\n    onCaregiverMessageAdded-..-> Workflow\n    onProviderMessageAdded-..-> Workflow\n    end\n\n    subgraph Activity\n    Workflow -..-> sendNudge["send nudge"]\n    Workflow -..-> sendAlert["send alert"]\n    Workflow -..-> sendOnCall["send on-call"]\n    end'}),(0,a.kt)("p",null,"This straightforward interface acts as a wrapper for the\nidle monitoring system's logic, ensuring easy management and maintenance."),(0,a.kt)("h4",{id:"streamlining-workflow-logic"},"Streamlining Workflow Logic"),(0,a.kt)("p",null,"Temporal excels in simplifying workflow logic. Within our workflow,\nwe focused solely on tracking state changes and reacting to timers,\nmaking the implementation straightforward and efficient.\nBy abstracting the complexities of managing workflow execution and coordination,\nTemporal empowered us to concentrate on the core functionality of our system."),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    Note over Signal: onCaregiverMessageAdded\n    Signal->>State: Update timestamp if it's empty\n    Signal->>Timer: Start timer if state is empty\n\n    Note over Signal: onProviderMessageAdded\n    Signal->>State: Clear timestamp\n    Signal->>Timer: Clear timer\n\n    loop Timer\n        Timer--\x3e>Timer: Trigger\n        Note over Timer: Check timestamp\n        Timer--\x3e>Activity: Send nudge\n        Timer--\x3e>Activity: Send alert\n        Timer--\x3e>Activity: Send on-call\n    end"}),(0,a.kt)("p",null,"By harnessing Temporal's capabilities, we created a highly efficient and\nstreamlined workflow engine that powers our idle monitoring system.\nEasing the implementation process with its user-friendly approach,\nTemporal allowed us to focus on delivering a reliable and effective solution."),(0,a.kt)("h2",{id:"real-world-applications"},"Real-World Applications"),(0,a.kt)("p",null,"Workflow engines have proven to be incredibly versatile,\noffering benefits beyond just idle monitoring.\nBy incorporating workflow engines into our system,\nwe have not only optimized our processes but also unlocked new possibilities\nfor efficient and resilient system design."),(0,a.kt)("p",null,"Let's explore some real-world applications that we are currently using:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Long-Running Data Exports:"),"\nWorkflow engines excel in managing complex data\nexport tasks that require substantial time and resources.\nBy leveraging the capabilities of a workflow engine,\nwe can efficiently handle and track the progress of these lengthy data exports,\nensuring their successful completion."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Data Quality Audits and Reconciliations:"),"\nWorkflow engines provide a systematic approach to performing data quality\naudits and reconciliations. With the ability to define and execute a series of\nsteps, workflow engines enable us to validate data integrity, identify\ndiscrepancies, and reconcile any inconsistencies quickly and accurately."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Idempotent Multi-Step Transactions:"),"\nWorkflow engines are adept at handling multi-step transactions that need to be\nexecuted reliably and idempotently. Whether it's managing subscription and\nregistration processes or coordinating complex financial transactions,\nworkflow engines ensure that each step is executed atomically, maintaining\ndata consistency and preventing any unintended side effects."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"By embracing workflow engines, we have not only optimized our existing system\nbut also opened doors to new possibilities in designing efficient and\nresilient systems. The versatility and flexibility of workflow engines make\nthem indispensable tools in solving complex problems and orchestrating\nintricate processes."))}p.isMDXComponent=!0},9862:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/idle-monitor-28e36312f2ff52dd1a2c2c06414802ca.png"}}]);